<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blueshift</name>
    </assembly>
    <members>
        <member name="T:Blueshift.WBIGateAssembler">
            <summary>
            This is a helper module for jumpgates that are built insted of ones that are single-piece.
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssembler.debugMode">
            <summary>
            Debug flag.
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssembler.supportSegmentPartName">
            <summary>
            Name of the part that forms part of the ring. This part will be decoupled and deleted from the
            vessel when assembling the jumpgate. When that happens, one of the segmentMesh items will be
            enabled. Once all the segmentMesh entries are enabled, the ring becomes fully operational.
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssembler.assembledCoM">
            <summary>
            When fully assembed, where to place the center of mass
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssembler.enabledMeshCount">
            <summary>
            Current count of enabled mesh segments.
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssembler.portalTriggerName">
            <summary>
            Name of the portal trigger for the jumpgate.
            </summary>
        </member>
        <member name="M:Blueshift.WBIGateAssembler.AddSegment">
            <summary>
            Adds new segment to the jumpgate if one can be found. The located segment will be destroyed.
            </summary>
        </member>
        <member name="M:Blueshift.WBIGateAssembler.CompleteAssembly">
            <summary>
            Debug method to complete gate assembly.
            </summary>
        </member>
        <member name="T:Blueshift.GateSelectedDelegate">
            <summary>
            Callback to indicate that a jumpgate was selected
            </summary>
            <param name="destinationGate">A Vessel representing the destination.</param>
        </member>
        <member name="T:Blueshift.JumpgateSelector">
            <summary>
            A simple dialog to select a jumpgate destination from.
            </summary>
        </member>
        <member name="F:Blueshift.JumpgateSelector.jumpgates">
            <summary>
            List of jumpgates to select from.
            </summary>
        </member>
        <member name="F:Blueshift.JumpgateSelector.titleText">
            <summary>
            Title of the selection dialog.
            </summary>
        </member>
        <member name="F:Blueshift.JumpgateSelector.selectionMessage">
            <summary>
            Jumpgate selection message.
            </summary>
        </member>
        <member name="F:Blueshift.JumpgateSelector.selectButtonTitle">
            <summary>
            Jumpgate select button title.
            </summary>
        </member>
        <member name="F:Blueshift.JumpgateSelector.gateSelectedDelegate">
            <summary>
            Gate selected delegate.
            </summary>
        </member>
        <member name="M:Blueshift.SDModuleSpaceDustHarvester.#ctor(PartModule)">
            <summary>
            Instantiates a new SDModuleSpaceDustHarvester
            </summary>
            <param name="module">The PartModule representing the FX module.</param>
        </member>
        <member name="T:Blueshift.WBIAnomalyTypes">
            <summary>
            Type of anomaly.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalyTypes.generic">
            <summary>
            Generic anomaly (the default).
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalyTypes.jumpGate">
            <summary>
            A special type of anomaly that is a jumpgate. Jumpgates can be enabled/disabled from the Game Difficulty menu.
            </summary>
        </member>
        <member name="T:Blueshift.WBIAnomalySpawnModes">
            <summary>
            Space anomalies can be set up in a variety of different orbits.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalySpawnModes.randomOrbit">
            <summary>
            Spawns in a random solar or planetary orbit.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalySpawnModes.randomSolarOrbit">
            <summary>
            Spawns in a random solar orbit.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalySpawnModes.randomPlanetOrbit">
            <summary>
            Spawns in a random planetary orbit.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalySpawnModes.everyLastPlanet">
            <summary>
            Spawns in random orbit of every last planet in each star system. One per each planet. Ignores maxInstances.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalySpawnModes.fixedOrbit">
            <summary>
            Spawns in a fixed orbit. One anomaly per orbit. Ignores maxInstances and orbitType.
            </summary>
        </member>
        <member name="T:Blueshift.WBIAnomalyOrbitTypes">
            <summary>
            Describes the type of orbit to create when spawning a space anomaly.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalyOrbitTypes.elliptical">
            <summary>
            Your garden variety elliptical orbit.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalyOrbitTypes.flyBy">
            <summary>
            Fly-by orbit
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnomalyOrbitTypes.random">
            <summary>
            Randomly select either elliptical or flyBy.
            </summary>
        </member>
        <member name="T:Blueshift.WBISpatialLocations">
            <summary>
            Describes the vessel's current spatial location.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpatialLocations.Unknown">
            <summary>
            Location unknown.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpatialLocations.Planetary">
            <summary>
            Planetary space: vessel's mainBody is a planet or a moon.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpatialLocations.Interplanetary">
            <summary>
            Interplanetary space: vessel's mainBody is a star.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpatialLocations.Interstellar">
            <summary>
            Interstellar space: the void between the stars...
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleAnimation.waterfallEffectController">
            <summary>
            Name of the Waterfall effects controller that controls the warp effects (if any).
            </summary>
        </member>
        <member name="T:Blueshift.WBIModuleGeneratorFX">
            <summary>
            An enhanced version of the stock ModuleGenerator that supports playing effects. Supports Waterfall.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.debugMode">
            <summary>
            A flag to enable/disable debug mode.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.moduleTitle">
            <summary>
            The module's title/display name.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.moduleDescription">
            <summary>
            The module's description.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.moduleID">
            <summary>
            The ID of the part module. Since parts can have multiple generators, this field helps identify them.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.guiVisible">
            <summary>
            Toggles visibility of the GUI.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.textureModuleID">
            <summary>
            Generators can control WBIAnimatedTexture modules. This field tells the generator which WBIAnimatedTexture to control.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.animationThrottle">
            <summary>
            A throttle control to vary the animation speed of a controlled WBIAnimatedTexture
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.startEffect">
            <summary>
            Generators can play a start effect when the generator is activated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.stopEffect">
            <summary>
            Generators can play a stop effect when the generator is deactivated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.runningEffect">
            <summary>
            Generators can play a running effect while the generator is running.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.waterfallEffectController">
            <summary>
            Name of the Waterfall effects controller that controls the warp effects (if any).
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.isMissingResources">
            <summary>
            Flag indicating whether or not we're missing resources needed to produce outputs.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleGeneratorFX.bypassRunCycle">
            <summary>
            This flag lets an external part module bypass the converter's run cycle which is triggered by FixedUpdate. When this flag is set to true, then the base class's FixedUpdate won't be called.
            Without the base class' FixedUpdate getting called, no resources will be converted. The external part module is expected to call RunGeneratorCycle manually.
            This system was put in place to get around timing issues where gravitic generators should produce enough resources for warp coils to consume each time tick, but due to timing issues, 
            the resources aren't produced in time for the warp engine to handle resource consumption. To get around that problem, the active warp engine handles resource conversion during its fixed update.
            </summary>
        </member>
        <member name="M:Blueshift.WBIModuleGeneratorFX.RunGeneratorCycle">
            <summary>
            This is a helper function to avoid issues where a warp engine needs a certain amount of resources in order to operate, the system should have them,
            but due to timing in the game, the resources aren't produced when they should be.
            </summary>
        </member>
        <member name="M:Blueshift.WBIModuleGeneratorFX.GetAmountProduced(System.String)">
            <summary>
            Returns the amount of the supplied resource that is produced per second.
            </summary>
            <param name="resourceName">A string containing the name of the resource to look for.</param>
            <returns>A double containing the amount of the resource produced, or 0 if the resource can't be found.</returns>
        </member>
        <member name="T:Blueshift.WBIPartModule">
            <summary>
            Just a simple base class to handle common functionality
            </summary>
        </member>
        <member name="M:Blueshift.WBIPartModule.getPartConfigNode">
            <summary>
            Retrieves the module's config node from the part config.
            </summary>
            <returns>A ConfigNode for the part module.</returns>
        </member>
        <member name="M:Blueshift.WBIPartModule.loadCurve(FloatCurve,System.String,ConfigNode)">
            <summary>
            Loads the desired FloatCurve from the desired config node.
            </summary>
            <param name="curve">The FloatCurve to load</param>
            <param name="curveNodeName">The name of the curve to load</param>
            <param name="defaultCurve">An optional default curve to use in case the curve's node doesn't exist in the part module's config.</param>
        </member>
        <member name="T:Blueshift.WBIAnimatedTexture">
            <summary>
            This class lets you animate textures by displaying a series of images in sequence. You can animate a material's diffuse and emissive texture. You include several textures that
            act as the individual animation frames, and the part module will show them in sequence. This is NOT as efficient as a texture strip but it's the best I can do for now, and
            it's easier to set up the UV maps on the meshes being animated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.debugMode">
            <summary>
            A flag to enable/disable debug mode.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.moduleID">
            <summary>
            The ID of the part module. Since parts can have multiple animated textures, this field helps identify them.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.textureTransformName">
            <summary>
            Name of the transform whose textures will be animated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.animatedEmissiveTexture">
            <summary>
            The name of the animated texture, like "WarpPlasma." The actual textures should be numbered in sequence (WarpPlasma1, WarpPlasma2, etc). 
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.animatedDiffuseTexture">
            <summary>
            The name of the diffuse texture. It too can be animated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.minFramesPerSecond">
            <summary>
            The minimum animation speed.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.maxFramesPerSecond">
            <summary>
            The maximum animation speed. Testing shows that with frame updates happening every 0.02 seconds, that corresponds to 50 frames per second.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.emissiveFadeTime">
            <summary>
            In seconds, how fast should the emissive fade when the animation isn't activated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.isActivated">
            <summary>
            The activation switch. When not running, the animations won't be animated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.animationThrottle">
            <summary>
            A throttle control to vary the animation speed between minFramesPerSecond and maxFramesPerSecond
            </summary>
        </member>
        <member name="F:Blueshift.WBIAnimatedTexture.fadesAtMinThrottle">
            <summary>
            A toggle that indicates whether or not to fade out the animations when the animationThrottle is set to zero.
            </summary>
        </member>
        <member name="M:Blueshift.WBIAnimatedTexture.blendTextures(System.Single,UnityEngine.Texture2D,UnityEngine.Texture2D,UnityEngine.Texture2D)">
            <summary>
            Blends two textures together and stores the result in an output texture. Curtesy of stupid_chris
            </summary>
            <param name="blend">Percentage to blend through (from 0 to 1)</param>
            <param name="from">Beginning texture</param>
            <param name="to">Finishing texture</param>
            <param name="output">Texture to appear blended</param>
        </member>
        <member name="M:Blueshift.WBIAnimatedTexture.getTextures(System.String)">
            <summary>
            Retrieves all the textures for the specified name. If the name is "WarpPlasma" for instance, then the array of textures will have "WarpPlasma1" "WarpPlasma2" and so on.
            The method will keep looking for textures until it can no longer find a texture in the numbered sequence.
            </summary>
            <param name="textureName">The base name of the texture to search for. It should have the relative path such as WildBlueIndustries/Blueshift/Parts/Engine/WarpPlasma.</param>
            <returns>An array of string containing the numbered textures that comprise the animation.</returns>
        </member>
        <member name="T:Blueshift.WBIResourceTweaker">
            <summary>
            This helper class enables players to tweak resources in the editor.
            </summary>
        </member>
        <member name="F:Blueshift.WBIResourceTweaker.resourceName">
            <summary>
            Name of the resource to tweak.
            </summary>
        </member>
        <member name="F:Blueshift.WBIResourceTweaker.tweakEnabledName">
            <summary>
            The text to use for the enable tweak button.
            </summary>
        </member>
        <member name="F:Blueshift.WBIResourceTweaker.tweakDisabledName">
            <summary>
            The text to use for the disable tweak button.
            </summary>
        </member>
        <member name="F:Blueshift.WBIResourceTweaker.isEnabled">
            <summary>
            Flag to indicate whether or not the resource tweaker is enabled or not.
            </summary>
        </member>
        <member name="T:Blueshift.WBIWarpCoil">
            <summary>
            Warp coils produce the warp capacity needed for vessels to go faster than light. Warp capacity is a fixed resource, but the resources needed to produce it are entirely optional.
            
            `
            MODULE
            {
                name = WBIWarpCoil
                textureModuleID = WarpCoil
                warpCapacity = 10
                RESOURCE
                {
                    name = GravityWaves
                    rate = 200
                    FlowMode = STAGE_PRIORITY_FLOW
                }
            }
            `
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.debugMode">
            <summary>
            A flag to enable/disable debug mode.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.textureModuleID">
            <summary>
            Warp coils can control WBIAnimatedTexture modules. This field tells the generator which WBIAnimatedTexture to control.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.runningEffect">
            <summary>
            Warp coils can play a running effect while the generator is running.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.waterfallEffectController">
            <summary>
            Name of the Waterfall effects controller that controls the warp effects (if any).
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.warpCapacity">
            <summary>
            The amount of warp capacity that the coil can produce.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.isActivated">
            <summary>
            The activation switch. When not running, the animations won't be animated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.statusDisplay">
            <summary>
            Display string for the warp coil status.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.animationThrottle">
            <summary>
            A control to vary the animation speed between minFramesPerSecond and maxFramesPerSecond
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.displacementImpulse">
            <summary>
            Warp coils can efficiently move a certain amount of mass to light speed and beyond without penalties.
            Going over this limit incurs performance penalties, but staying under this value provides benefits.
            The displacement value is rated in metric tons.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.needsMaintenance">
            <summary>
            Flag to indicate that the part needs maintenance in order to function.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpCoil.waterfallFXModule">
            <summary>
            Optional (but highly recommended) Waterfall effects module
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpCoil.UpdateMTBFRateMultiplier(System.Double)">
            <summary>
            Updates the MTBF rate multiplier with the new rate.
            </summary>
            <param name="rateMultiplier">A double containing the new multiplier.</param>
        </member>
        <member name="M:Blueshift.WBIWarpCoil.UpdateMTBF(System.Double)">
            <summary>
            Updates the warp core's EVA Repairs' MTBF, if any.
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpCoil.HasEnoughResources(System.Double)">
            <summary>
            Determines whether or not the warp coil has enough resources to operate.
            </summary>
            <param name="rateMultiplier">The resource consumption rate multiplier</param>
            <returns>True if the vessel has enough resources to power the warp coil, false if not.</returns>
        </member>
        <member name="M:Blueshift.WBIWarpCoil.GetAmountRequired(System.String)">
            <summary>
            Returns the amount of resource required per second.
            </summary>
            <param name="resourceName">A string containing the name of the resource.</param>
            <returns>A double containing the amount of required resource if it can be found, or 0 if not.</returns>
        </member>
        <member name="T:Blueshift.WBICircularizationStates">
            <summary>
            Circularization states for auto-circularization.
            </summary>
        </member>
        <member name="F:Blueshift.WBICircularizationStates.doNotCircularize">
            <summary>
            Don't circularize.
            </summary>
        </member>
        <member name="F:Blueshift.WBICircularizationStates.needsCircularization">
            <summary>
            Orbit needs to be circularized.
            </summary>
        </member>
        <member name="F:Blueshift.WBICircularizationStates.hasBeenCircularized">
            <summary>
            Orbit has been circularized
            </summary>
        </member>
        <member name="F:Blueshift.WBICircularizationStates.canBeCircularized">
            <summary>
            Orbit can be circularized.
            </summary>
        </member>
        <member name="T:Blueshift.WBIWarpEngine">
            <summary>
            The Warp Engine is designed to propel a vessel faster than light. It requires WarpCapacity That is produced by WBIWarpCoil part modules. 
            
            ```
            MODULE
            {
                name = WBIWarpEngine
                ...Standard engine parameters here...
                moduleDescription = Enables fater than light travel.
                bowShockTransformName = bowShock
                minPlanetaryRadius = 3.0
                displacementImpulse = 100
                
                planetarySOISpeedCurve
                {
                    key = 1 0.1
                    ...
                    key = 0.1 0.005
                }
                
                warpCurve
                {
                    key = 1 0
                    key = 10 1
                    ...
                    key = 1440 10
                }
                
                waterfallEffectController = warpEffectController
                waterfallWarpEffectsCurve
                {
                    key = 0 0
                    ...
                    key = 1.5 1
                }
                
                textureModuleID = WarpCore
            }
            ```
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.onWarpEffectsUpdated">
            <summary>
            Game event signifying when warp engine effects have been updated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.onWarpEngineStart">
            <summary>
            Game event signifying when the warp engine starts.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.onWarpEngineShutdown">
            <summary>
            Game event signifying when the warp engine shuts down.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.onWarpEngineFlameout">
            <summary>
            Game event signifying when the warp engine flames out.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.onWarpEngineUnFlameout">
            <summary>
            Game event signifying when the warp engine un-flames out.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.moduleDescription">
            <summary>
            Short description of the module as displayed in the editor.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.minPlanetaryRadius">
            <summary>
            Minimum planetary radius needed to go to warp. This is used to calculate the user-friendly minimum warp altitude display.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.minWarpAltitudeDisplay">
            <summary>
            Minimum altitude at which the engine can go to warp. The engine will flame-out unless this altitude requirement is met.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpSpeedDisplay">
            <summary>
            The FTL display velocity of the ship, measured in C, that is adjusted for throttle setting and thrust limiter.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.maxWarpSpeedDisplay">
            <summary>
            (Debug visible) Maximum possible warp speed.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.preflightCheck">
            <summary>
            Pre-flight status check.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.spatialLocation">
            <summary>
            Where we are in space.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.vesselCourse">
            <summary>
            The vessel's course- which is really just the selected target.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.targetDistance">
            <summary>
            Distance to the vessel's target
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.planetarySOISpeedCurve">
            <summary>
            Limits top speed while in a planetary or munar SOI so we don't zoom past the celestial body.
            Out in interplanetary space we don't have a speed limit.
            The first number represents how close to the SOI edge the vessel is (1 = right at the edge, 0.1 = 10% of the distance to the SOI edge)
            The second number is the top speed multiplier.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.interstellarAccelerationCurve">
            <summary>
            Whenever you cross into interstellar space, or are already in interstellar space and throttled down,
            then apply this acceleration curve. The warp speed will be max warp speed * curve's speed modifier.
            The first number represents the time since crossing the boundary/throttling up, and the second number is the multiplier.
            We don't apply this curve when going from interstellar to interplanetary space.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.interstellarPowerMultiplier">
            <summary>
            Multiplies resource consumption and production rates by this multiplier when in interstellar space.
            Generators identified by warpPowerGeneratorID will be affected by this multiplier.
            Default multiplier is 10.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpCurve">
            <summary>
            In addition to any specified PROPELLANT resources, warp engines require warpCapacity. Only parts with
            a WBIWarpCoil part module can generate warpCapacity.
            The warp curve controls how much warpCapacity is neeeded to go light speed or faster.
            The first number represents the available warpCapacity, while the second number gives multiples of C.
            You can apply any kind of warp curve you want, but the baseline uses the Fibonacci sequence * 10.
            It may seem steep, but in KSP's small scale, 1C is plenty fast.
            This curve is modified by the engine's displacementImpulse and current vessel mass.
            effectiveWarpCapacity = warpCapacity * (displacementImpulse / vessel mass)
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.waterfallEffectController">
            <summary>
            Name of the Waterfall effects controller that controls the warp effects (if any).
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.waterfallWarpEffectsCurve">
            <summary>
            Waterfall Warp Effects Curve. This is used to control the Waterfall warp field effects based on the vessel's current warp speed.
            The first number represents multiples of C, and the second number represents the level at which to drive the warp effects.
            The effects value ranges from 0 to 1, while there's no upper limit to multiples of C, so keep that in mind.
            The default curve is:
            key = 0 0
            key = 1 0.5
            key = 1.5 1
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.textureModuleID">
            <summary>
            The name of the WBIAnimatedTexture to drive as part of the warp effects.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpPowerGeneratorID">
            <summary>
            Engines can drive WBIModuleGeneratorFX that produce resources needed for warp travel if their moduleID matches this value.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.photonicBoomEffectName">
            <summary>
            Optional effect to play when the vessel exceeds the speed of light.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpSimulationResource">
            <summary>
            Used when calculating the max warp speed in the editor, this is the resource that is common between the warp engine, gravitic generator, and warp coil.
            This resource should be the limiting resource in the trio (the one that runs out the fastest).
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.powerMultiplier">
            <summary>
            The ratio between the amount of power produced for the warp coils to the amount of power consumed by the warp coils.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.displacementMultiplier">
            <summary>
            The ratio between the total mass displaced by the warp coils to the vessel's total mass.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpIgnitionThreshold">
            <summary>
            When the powerMultiplier drops below this value, the engine will flame out.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.planetarySpeedBrakeEnabled">
            <summary>
            Planetary Speed Brake
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpEngineerSkill">
            <summary>
            The skill required to improve warp speed. Default is "ConverterSkill" (Engineers have this)
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpSpeedBoostRank">
            <summary>
            The skill rank required to improve warp speed.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpSpeedSkillMultiplier">
            <summary>
            Per skill rank, the multiplier to multiply warp speed by.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.isInSpace">
            <summary>
            (Debug visible) Flag to indicate that we're in space (orbiting, suborbital, or escaping)
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.meetsWarpAltitude">
            <summary>
            (Debug visible) Flag to indicate that the ship meets minimum warp altitude.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.hasWarpCapacity">
            <summary>
            (Debug visible) Flag to indicate that the ship has sufficient warp capacity.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.bowShockTransformName">
            <summary>
            Name of optional bow shock transform.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.applyWarpTranslation">
            <summary>
            (Debug visible) Flag to indicate that the engine should apply translation effects. Multiple engines can work together as long as each one's minimum requirements are met.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.totalDisplacementImpulse">
            <summary>
            (Debug visible) Total displacement impulse calculated from all active warp engines.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.totalWarpCapacity">
            <summary>
            (Debug visible) Total warp capacity calculated from all active warp engines.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.effectiveWarpCapacity">
            <summary>
            (Debug visible) Effective warp capacity after accounting for vessel mass
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpDistance">
            <summary>
            (Debug visible) Distance per physics update that the vessel will move.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.effectsThrottle">
            <summary>
            (Debug visible) Current throttle level for the warp effects.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpResourceProduced">
            <summary>
            (Debug visible) amount of simulation resource produced.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpResourceRequired">
            <summary>
            (Debug visible) amount of simulation resource consumed.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.terrainHit">
            <summary>
            Hit test stuff to make sure we don't run into planets.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.layerMask">
            <summary>
            Layer mask used for the hit test
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpEngines">
            <summary>
            List of active warp engines
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpCoils">
            <summary>
            List of enabled warp coils
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpGenerators">
            <summary>
            List of warp generators
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpEngineTextures">
            <summary>
            List of animated textures driven by the warp engine
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.previousBody">
            <summary>
            Previously visited celestial body
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.bodyBounds">
            <summary>
            Bounds object of the celestial body
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.throttleLevel">
            <summary>
            Current throttle level
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.bowShockTransform">
            <summary>
            Optional bow shock effect transform.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.warpFlameout">
            <summary>
            Due to the way engines work on FixedUpdate, the engine can determine that it is NOT flamed out if it meets its propellant requirements. Therefore, we keep track of our own flameout conditions.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.waterfallFXModule">
            <summary>
            Optional (but highly recommended) Waterfall effects module
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.hasExceededLightSpeed">
            <summary>
            Flag to indicate whether or not the vessel has exceeded light speed.
            </summary>
        </member>
        <member name="F:Blueshift.WBIWarpEngine.consumptionRateMultiplier">
            Multiplier used for consumption of resources and MTBF/heat.
        </member>
        <member name="M:Blueshift.WBIWarpEngine.CircularizeOrbit">
            <summary>
            Circularizes the ship's orbit
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.CircularizeOrbitAction(KSPActionParam)">
            <summary>
            Action menu item to circularize the ship's orbit.
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.IsActivated">
            <summary>
            Determines whether or not the engine is ignited and operational.
            </summary>
            <returns>true if the engine is activated, false if not.</returns>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.IsFlamedOut">
            <summary>
            Checks flamout conditions including ensuring that the ship is in space, meets minimum warp altitude, and has sufficient warp capacity.
            </summary>
            <returns>true if the engine is flamed out, false if not.</returns>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.HasWarpCapacity">
            <summary>
            Determines whether or not the ship has sufficient warp capacity to go FTL.
            </summary>
            <returns>true if the ship has sufficient warp capacity, false if not.</returns>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.IsInSpace">
            <summary>
            Determines whether or the ship is in space. To be in space the ship must be sub-orbital, orbiting, or escaping.
            </summary>
            <returns>true if the ship is in space, false if not.</returns>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.MeetsWarpAltitude">
            <summary>
            Determines whether or not the ship meets the minimum required altitude to go to warp.
            </summary>
            <returns>true if the ship meets minimum altitude, false if not.</returns>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.UpdateWarpStatus">
            <summary>
            Updates the warp status display
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.fadeOutEffects">
            <summary>
            Fades out the warp effects
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.getAnimatedWarpEngineTextures">
            <summary>
            Finds any animated textures that should be controlled by the warp engine
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.calculateBestWarpSpeed">
            <summary>
            Calculates the best possible warp speed from the vessel's active warp engines.
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.getTotalWarpCapacity">
            <summary>
            Calulates the total warp capacity from the vessel's active warp coils. Each warp coil must successfully consume its required resources in order to be considered.
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.updateWarpPowerGenerators">
            <summary>
            Updates the generators that provide warp power.
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.disableGeneratorBypass">
            <summary>
            In order to synchronize the converter's process with the active warp engine, we enable a generator bypass. The moment that we no longer need to do that, such as when
            the engine is shut down, or it flames out, we want to disable the bypass.
            </summary>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.shouldApplyWarp">
            <summary>
            Looks for all the active warp engines in the vessel. From the list, only the top-most engine in the list of active engines should apply warp translation. All others
            simply provide support.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blueshift.WBIWarpEngine.loadCurve(FloatCurve,System.String,ConfigNode)">
            <summary>
            Loads the desired FloatCurve from the desired config node.
            </summary>
            <param name="curve">The FloatCurve to load</param>
            <param name="curveNodeName">The name of the curve to load</param>
            <param name="defaultCurve">An optional default curve to use in case the curve's node doesn't exist in the part module's config.</param>
        </member>
        <member name="M:Blueshift.WFModuleWaterfallFX.GetWaterfallModule(Part)">
            <summary>
            Attempts to obtain the Waterfall FX module from the supplied part.
            </summary>
            <param name="part">A Part that might contain a waterfall fx module</param>
            <returns>A WFModuleWaterfallFX if the part has a waterfall module, or null if not.</returns>
        </member>
        <member name="M:Blueshift.WFModuleWaterfallFX.#ctor(PartModule)">
            <summary>
            Instantiates a new WFModuleWaterfallFX
            </summary>
            <param name="module">The PartModule representing the FX module.</param>
        </member>
        <member name="M:Blueshift.WFModuleWaterfallFX.SetControllerOverride(System.String,System.Boolean)">
            <summary>
            Sets the override state for the specified controller.
            </summary>
            <param name="controllerName">A string containing the name of the controller to override.</param>
            <param name="overriden">A bool indicating whether or not to override the controller.</param>
        </member>
        <member name="M:Blueshift.WFModuleWaterfallFX.SetControllerOverrideValue(System.String,System.Single)">
            <summary>
            Sets the override value for the specified controller
            </summary>
            <param name="controllerName">A string containing the name of the controller to override.</param>
            <param name="value">A float containing the override value.</param>
        </member>
        <member name="M:Blueshift.WFModuleWaterfallFX.SetControllerValue(System.String,System.Single)">
            <summary>
            Sets the value for the specified controller
            </summary>
            <param name="controllerName">A string containing the name of the controller to override.</param>
            <param name="value">A float containing the override value.</param>
        </member>
        <member name="T:Blueshift.BlueshiftScenario">
            <summary>
             This class helps starships determine when they're in interstellar space.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.kLightYear">
            <summary>
            Light-year unit of measurement. Abbreviated "Ly."
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.kGigaMeter">
            <summary>
            Gigameter unit of measurement. Abbreviate "Gm."
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.kMegaMeter">
            <summary>
            Megameter unit of measurement. Abbreviated "Mm."
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.messageDuration">
            <summary>
            How long to display a screen message.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.shared">
            <summary>
            Shared instance of the helper.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.debugMode">
            <summary>
            Flag to indicate that the mod is in debug mode.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.interstellarWarpSpeedMultiplier">
            <summary>
            When in intersteller space, vessels can go much faster. This multiplier tells us how much faster we can go.
            For comparison, Mass Effect Andromeda's Tempest can cruise at 4745 times light speed, or 13 light-years per day.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.warpEngineerSkill">
            <summary>
            Skill to use for improving warp engine performance.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.warpSpeedBoostRank">
            <summary>
            Minimum skill rank required to improve warp engine performance.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.warpSpeedSkillMultiplier">
            <summary>
            Skill multiplier to use when improving warp engine performance.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.autoCircularize">
            <summary>
            Flag to indicate whether or not to auto-circularize the orbit.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.circularizationResourceDef">
            <summary>
            It can cost resources to auto-circularize a ship after warp.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.circularizationCostPerTonne">
            <summary>
            How much circularizationResource does it cost per metric ton of ship to circularize its orbit.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.spawnSpaceAnomalies">
            <summary>
            Flag to indicate whether or not Space Anomalies are enabled.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.spawnJumpgates">
            <summary>
            Flag to indicate whether or not Jumpgate anomalies are enabled.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.jumpgateStartupIsDestructive">
            <summary>
            The jumpgate startup sequence is destructive. Stay clear!
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.maintenanceEnabled">
            <summary>
            Flag to indicate if parts require maintenance.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.minRendezvousDistancePlanetary">
            <summary>
            In meters, minimum distance in planetary space that's required to rendezvous with a vessel via auto-circularization.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.minRendezvousDistanceInterplanetary">
            <summary>
            In meters, minimum distance in interplanetary space that's required to rendezvous with a vessel via auto-circularization.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.rendezvousDistance">
            <summary>
            In meters, how close to the targed vessel should you end up at when you rendezvous with it during auto-circularization or a jump.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.jumpGateSourceId">
            <summary>
            The source jumpgate that the traveler is traveling from. This is primarily used to set focus back to the source gate to jump something else.
            </summary>
        </member>
        <member name="F:Blueshift.BlueshiftScenario.destinationGateId">
            <summary>
            The destination gate that the traveler is traviling to. This is primarily used to set focus back to the source gate to jump something else.
            </summary>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetDestinationLocation(CelestialBody,CelestialBody)">
            <summary>
            Determines the spatial location of the destination celestial body relative to the source body.
            </summary>
            <param name="sourceBody">A CelestialBody representing the source. Typically this is the active vessel's mainBody.</param>
            <param name="destinationBody">A CelestialBody containing the desired destination.</param>
            <returns>A WBISpacialLocations enum with the relative location of the destination.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetHighestRank(Vessel,System.String,ProtoCrewMember@)">
            <summary>
            Returns the highest ranking astronaut in the vessel that has the required skill.
            </summary>
            <param name="vessel">The vessel to check for the highest ranking kerbal.</param>
            <param name="skillName">The name of the skill to look for. Examples include RepairSkill and ScienceSkill.</param>
            <param name="astronaut">The astronaut that has the highest ranking skill.</param>
            <returns>The skill rank rating of the highest ranking astronaut (if any)</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.AddJumpgateToNetwork(Blueshift.WBISpaceAnomaly)">
            <summary>
            Adds the jumpgate anomaly to the network.
            </summary>
            <param name="anomaly">The WBISpaceAnomaly to add.</param>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.AddJumpgateToNetwork(System.String,System.String)">
            <summary>
            Adds the jumpgate to the network.
            </summary>
            <param name="vesselID">A string containing the ID of the jumpgate vessel.</param>
            <param name="networkID">A string containing the ID of the jumpgate network.</param>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetDestinationGates(System.String,Vector3d,System.Double)">
            <summary>
            Returns the list of possible destination gates that are in range of the specified origin point.
            </summary>
            <param name="networkID">A string containing the network ID.</param>
            <param name="originPoint">A Vector3d containing the origin point to check for gates in range.</param>
            <param name="maxJumpRange">A double containing the maximum jump range, measured in light-years. Set to -1 to ignore max jump range.</param>
            <returns>A List of Vessel containing the vessels in the network that are in range, or null if no network or vessels in range could be found.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetAnomaly(System.String)">
            <summary>
            Returns the anomaly matching the desired vesselID.
            </summary>
            <param name="vesselID">A string containing the vessel ID.</param>
            <returns>A WBISpaceAnomaly if the anomaly can be found, or null if not.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetVessel(System.String)">
            <summary>
            Attempts to locate the destination vessel based on the ID supplied.
            </summary>
            <param name="vesselID">A string containing the vessel ID</param>
            <returns>A Vessel if one can be found, null if not.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetSpatialLocation(Vessel)">
            <summary>
            Determines thevessel's spatial location.
            </summary>
            <param name="vessel">The Vessel to check.</param>
            <returns>A WBISpatialLocations withe spatial location.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.IsAStar(CelestialBody)">
            <summary>
            Determines whether or not the celestial body is a star.
            </summary>
            <param name="body">The body to test.</param>
            <returns>true if the body is a star, false if not.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.IsInInterstellarSpace(Vessel)">
            <summary>
            Determines whether or not the vessel is in interstellar space.
            </summary>
            <param name="vessel"></param>
            <returns></returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.IsInSpace(Vessel)">
            <summary>
            Determines whether or not the vessel is in space.
            </summary>
            <param name="vessel">The Vessel to check.</param>
            <returns>true if the vessel is in space, false if not.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetEveryLastPlanet">
            <summary>
            Finds every last planet in every star system.
            </summary>
            <returns>A List of CelestialBody</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetStars">
            <summary>
            Finds all the stars in the game.
            </summary>
            <returns>A Listcontaining all the stars in the game. Celestial bodies that are on the celestialBlacklist are ignored.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetPlanets">
            <summary>
            Returns a list of all the planets in the game.
            </summary>
            <returns>A Listcontaining all the planets in the game. Celestial bodies that are on the celestialBlacklist are ignored.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetLastPlanet(CelestialBody)">
            <summary>
            Finds the last planet in the supplied star system.
            </summary>
            <param name="star">A Celestial Body that is the star to check.</param>
            <returns>A CelestialBody representing the last planet in the star system (if any)</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.HasPlanets(CelestialBody)">
            <summary>
            Determines whether or not the celestial body has planets orbiting it.
            </summary>
            <param name="celestialBody">The CelestialBody to check for planets.</param>
            <returns>true if the celestialBody has orbiting planets, false if not.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetDistanceToTarget(Vessel,System.String@,System.String@)">
            <summary>
            Calculates the distance and units of measurement to the vessel's target (if any).
            </summary>
            <param name="vessel">The Vessel to check for targets.</param>
            <param name="units">A string representing the units of measurement computed for the distance.</param>
            <param name="targetName">A string representing the name of the vessel's target.</param>
            <returns>A double containing the distance. If there is no target then the distance is 0.</returns>
        </member>
        <member name="M:Blueshift.BlueshiftScenario.GetParentStar(CelestialBody)">
            <summary>
            Find the parent star of the celestial body.
            </summary>
            <param name="body">The celestial body to check.</param>
            <returns>A CelestialBody that is the query parameter's star, or null.</returns>
        </member>
        <member name="T:Blueshift.WBIModuleHarvesterFX">
            <summary>
            This resource harvester add the ability to drive Effects, animated textures, and Waterfall.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.debugMode">
            <summary>
            A flag to enable/disable debug mode.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.moduleTitle">
            <summary>
            The module's title/display name.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.moduleDescription">
            <summary>
            The module's description.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.moduleID">
            <summary>
            The ID of the part module. Since parts can have multiple harvesters, this field helps identify them.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.guiVisible">
            <summary>
            Toggles visibility of the GUI.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.textureModuleID">
            <summary>
            Harvesters can control WBIAnimatedTexture modules. This field tells the generator which WBIAnimatedTexture to control.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.animationThrottle">
            <summary>
            A throttle control to vary the animation speed of a controlled WBIAnimatedTexture
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.startEffect">
            <summary>
            Harvesters can play a start effect when the generator is activated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.stopEffect">
            <summary>
            Harvesters can play a stop effect when the generator is deactivated.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.runningEffect">
            <summary>
            Harvesters can play a running effect while the generator is running.
            </summary>
        </member>
        <member name="F:Blueshift.WBIModuleHarvesterFX.waterfallEffectController">
            <summary>
            Name of the Waterfall effects controller that controls the warp effects (if any).
            </summary>
        </member>
        <member name="T:Blueshift.WBISpaceAnomaly">
            <summary>
            Describes a space anomaly. Similar to asteroids, space anomalies are listed as unknown objects until tracked and visited. Each type of anomaly is defined by a SPACE_ANOMALY config node.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.name">
            <summary>
            Identifier for the space anomaly.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.partName">
            <summary>
            Name of the part to spawn
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.vesselName">
            <summary>
            Anomalies are typically named "UNK-" and a sequence of letters and numbers, but you can override the name of the vessel if desired.
            This field should be used with unique anomalies (maxInstances = 1).
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.anomalyType">
            <summary>
            Type of anomaly. Default is generic.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.sizeClass">
            <summary>
            Like asteroids, space anomalies have a size class that ranges from Size A (12 meters) to Size I (100+ meters).
            The default is A.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.spawnMode">
            <summary>
            How does an instance spawn
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.orbitType">
            <summary>
            The type of orbit to create. Default is elliptical.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.maxDaysToClosestApproach">
            <summary>
            For flyBy orbits, the max number of days until the anomaly reaches the closest point in its orbit. Default is 30.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.flyByOrbitChance">
            <summary>
            For orbitType = random, on a roll of 1 to 100, what is the chance that the orbit will be flyBy. Default is 50.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.fixedBody">
            <summary>
            For fixedOrbit, the celestial body to spawn around.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.fixedSMA">
            <summary>
            For fixedOrbit, the Semi-Major axis of the orbit.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.fixedEccentricity">
            <summary>
            For fixedOrbit, the eccentrcity of the orbit.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.fixedInclination">
            <summary>
            Fixed inclination. Only used for fixedOrbit. If set to -1 then a random inclination will be used instead.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.minLifetime">
            <summary>
            For undiscovered objects, the minimum number of seconds that the anomaly can exist. Default is 86400 (1 day).
            Set to -1 to use maximum possible value. When set to -1, maxLifetime is ignored.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.maxLifetime">
            <summary>
            For undiscovered objects, the maximum number of seconds that the anomaly can exist. Default is 1728000 (20 days).
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.expirationDate">
            <summary>
            Timestamp when the anomaly expires. If set to -1 then it never expires.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.spawnTargetNumber">
            <summary>
            Spawn chance in a roll between 1 and 1000
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.maxInstances">
            <summary>
            Maximum number of objects of this type that may exist at any given time. Default is 10.
            Set to -1 for unlimited number.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.vesselId">
            <summary>
            ID of the vessel as found in the FlightGlobals.VesselsUnloaded.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.isKnown">
            <summary>
            Flag to indicate whether or not the gate should automatically be added to the network's known gates and/or is automatically tracked by the Tracking Station.
            If set to false (the default), then players must visit the gate in order for it to be added to the network.
            Applies to anomalyType = jumpGate.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.networkID">
            <summary>
            Only gates with matching network IDs can connect to each other. Leave blank if the gate connects to any network.
            If there are only two gates in the network then there is no need to select the other gate from the list.
            You can add additional networks by adding a semicolon character in between network IDs.
            Applies to anomalyType = jumpGate.
            </summary>
        </member>
        <member name="F:Blueshift.WBISpaceAnomaly.rendezvousDistance">
            <summary>
            Overrides the jumpgate's rendezvous distance.
            </summary>
        </member>
        <member name="M:Blueshift.WBISpaceAnomaly.CopyFrom(Blueshift.WBISpaceAnomaly)">
            <summary>
            Copies the fields from another space anomaly.
            </summary>
            <param name="copyFrom">The WBISpaceAnomaly whose fields we're interested in.</param>
        </member>
        <member name="M:Blueshift.WBISpaceAnomaly.Load(Blueshift.WBISpaceAnomaly,ConfigNode)">
            <summary>
            Loads the ConfigNode data into the anomaly object.
            </summary>
            <param name="anomaly">A WBISpaceAnomaly to load the data into.</param>
            <param name="node">A ConfigNode containing serialized data.</param>
        </member>
        <member name="M:Blueshift.WBISpaceAnomaly.Save(System.String)">
            <summary>
            Serializes the anomaly to a ConfigNode.
            </summary>
            <param name="nodeName">A string containing the name of the node.</param>
            <returns>A ConfigNode with the serialized data.</returns>
        </member>
        <member name="M:Blueshift.WBISpaceAnomaly.CreateNewInstancesIfNeeded(System.Collections.Generic.List{Blueshift.WBISpaceAnomaly})">
            <summary>
            Checks to see if we should create a new instance.
            </summary>
        </member>
        <member name="T:Blueshift.WBITechUnlock">
            <summary>
            This part module is designed to unlock random nodes in a tech tree. It can also drive Waterfall effects.
            </summary>
        </member>
        <member name="F:Blueshift.WBITechUnlock.dieRoll">
            <summary>
            Maximum RNG value
            </summary>
        </member>
        <member name="F:Blueshift.WBITechUnlock.unlockTargetNumber">
            <summary>
            Target number to unlock a tech tree node
            </summary>
        </member>
        <member name="F:Blueshift.WBITechUnlock.unlockMessage">
            <summary>
            Tech unlock message
            </summary>
        </member>
        <member name="F:Blueshift.WBITechUnlock.waterfallEffectController">
            <summary>
            Name of the Waterfall effects controller that controls the warp effects (if any).
            </summary>
        </member>
        <member name="F:Blueshift.WBITechUnlock.animationThrottle">
            <summary>
            A control to vary the animation speed between minFramesPerSecond and maxFramesPerSecond
            </summary>
        </member>
        <member name="F:Blueshift.WBITechUnlock.hasBeenVisited">
            <summary>
            Flag to indicate whether or not the part has been visited.
            </summary>
        </member>
        <member name="F:Blueshift.WBITechUnlock.waterfallFXModule">
            <summary>
            Optional (but highly recommended) Waterfall effects module
            </summary>
        </member>
        <member name="F:Blueshift.ResourcePriceTiers.Planetary">
            <summary>
            Planetary price tier
            </summary>
        </member>
        <member name="F:Blueshift.ResourcePriceTiers.Interplanetary">
            <summary>
            Interplanetary price tier
            </summary>
        </member>
        <member name="F:Blueshift.ResourcePriceTiers.Interstellar">
            <summary>
            Interstellar price tier
            </summary>
        </member>
        <member name="T:Blueshift.ResourceToll">
            <summary>
            Defines a resource that must be paid in order to reach the desired destination. If defined, then the default mechanics are overridden.
            </summary>
        </member>
        <member name="F:Blueshift.ResourceToll.name">
            <summary>
            Name of the resource toll.
            </summary>
        </member>
        <member name="F:Blueshift.ResourceToll.priceTier">
            <summary>
            Price tier- one of: planetary, interplanetary, interstellar
            </summary>
        </member>
        <member name="F:Blueshift.ResourceToll.resourceName">
            <summary>
            Name of the resource required to pay the jump toll.
            </summary>
        </member>
        <member name="F:Blueshift.ResourceToll.amountPerTonne">
            <summary>
            Amount of resource per metric tonne mass of the traveler
            </summary>
        </member>
        <member name="F:Blueshift.ResourceToll.paidByTraveler">
            <summary>
            Resource is paid by the traveler that is initiating the jump
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.debugMode">
            <summary>
            A flag to enable/disable debug mode.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.textureModuleID">
            <summary>
            This field tells the module which WBIAnimatedTexture to control.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.startupAnimation">
            <summary>
            Animation to play before playing the portal effect.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.runningEffect">
            <summary>
            Warp coils can play a running effect while the generator is running.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.waterfallEffectController">
            <summary>
            Name of the Waterfall effects controller that controls the warp effects (if any).
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.effectSpoolTime">
            <summary>
            In seconds, how quickly to throttle up the waterfall effect from 0 to 1.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.effectsThrottle">
            <summary>
            A control to vary the animation speed between minFramesPerSecond and maxFramesPerSecond
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.networkID">
            <summary>
            Only gates with matching network IDs can connect to each other. Leave blank if the gate connects to any network.
            If there are only two gates in the network then there is no need to select the other gate from the list.
            You can add additional networks by adding a semicolon character in between network IDs.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.gateAddress">
            <summary>
            For paired gates, the address of the gate. This should be set using JUMPGATE_ANOMALY.
            Default is an empty address.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.pairedGateAddress">
            <summary>
            For paired gates, the address of the paired gate. This should be set using JUMPGATE_ANOMALY.
            Default is an empty address.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.maxJumpRange">
            <summary>
            If the gate has a limited jump range, then only those gates that are in the network and within range can be selected.
            The exception is a network of two gates; max range is ignored.
            Set to -1 (the default) for unlimited jump range.
            Units are in light-years (9460700000000000 meters)
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.jumpMaxMass">
            <summary>
            Since KSP's vessel measurements are so wacked when in flight, we'll use a maximum jump mass instead.
            Set to -1 (the default value) for unlimited mass.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.interactionRange">
            <summary>
            Range at which players can interact with the gate's PAW. Default is 500 meters.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.portalTriggerTransform">
            <summary>
            Name of the portal trigger transform. The trigger is a collider set to Is Trigger in Unity.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.triggerStartupScaleCurve">
            <summary>
            Scale curve to use during startup. This should follow the Waterfall effect (if any).
            During the startup sequence the Z-axis will be scaled according to this curve. Any vessel or vessel parts caught
            by the portal trigger during startup will get vaporized unless "Jumpgates: desctructive startup" in Game Difficulty is disabled.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.rendezvousDistance">
            <summary>
            Specifies the rendezvous distance. Default is 50 meters away from the gate's vessel transform. Set to -1 (the default) to use the value from Blueshift settings.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.autoActivate">
            <summary>
            Flag to automatically activate the jumpgate. It requires two gates in the network.
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.waterfallFXModule">
            <summary>
            Optional (but highly recommended) Waterfall effects module
            </summary>
        </member>
        <member name="F:Blueshift.WBIJumpGate.vesselID">
            <summary>
            The ID of the vessel when it was first created.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Blueshift.WBIJumpGate.ActionSelectGate(KSPActionParam)" -->
        <member name="M:Blueshift.WBIJumpGate.SetGateEnabled(System.Boolean)">
            <summary>
            Enables/disables the jumpgate.
            </summary>
            <param name="isEnabled">A flag that sets the gate enabled/disabled.</param>
        </member>
        <member name="T:Blueshift.WBIDockingAlignmentLock">
            <summary>
            A simple helper class to lock the docking alignment.
            </summary>
        </member>
        <member name="F:Blueshift.WBIDockingAlignmentLock.lockAlignment">
            <summary>
            Toggles docking alignment to locked/unlocked.
            </summary>
        </member>
        <member name="T:Blueshift.WBIGateAssemblyChecker">
            <summary>
            A handy class for making sure that a jumpgate is fully assembled.
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssemblyChecker.totalSegments">
            <summary>
            Total number of segments to check.
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssemblyChecker.primaryNodeName">
            <summary>
            Name of the node to check for other gate segments.
            </summary>
        </member>
        <member name="F:Blueshift.WBIGateAssemblyChecker.secondaryNodeName">
            <summary>
            Name of the node to check for other gate segments.
            </summary>
        </member>
        <member name="T:Blueshift.WBICustomAsteroid">
            <summary>
            A customized version of ModuleAsteroid to allow for standard asteroid functionality while avoiding the procedural mesh generation.
            This is helpful for custom asteroid anomalies like Oumuamua.
            </summary>
        </member>
        <member name="F:Blueshift.WBICustomAsteroid.sampleAcquired">
            <summary>
            Flag indicating that a sample of the asteroid has been acquired.
            </summary>
        </member>
        <member name="F:Blueshift.WBICustomAsteroid.scienceExperiment">
            <summary>
            The science experiment to run.
            </summary>
        </member>
        <member name="F:Blueshift.WBICustomAsteroid.flightCoMTracker">
            <summary>
            Tracker for the asteroid's center of mass.
            </summary>
        </member>
        <member name="M:Blueshift.WBICustomAsteroid.OnStart(PartModule.StartState)">
            <summary>
            Overrides the start method to avoid generating a procedural asteroid.
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Blueshift.WBICustomAsteroid.RunExperiment">
            <summary>
            Replacement event for the asteroid's sample return experiment.
            </summary>
        </member>
        <member name="M:Blueshift.WBICustomAsteroid.TargetCoM">
            <summary>
            Replacement event for ModuleAsteroid's event to target the asteroid's center of mass.
            </summary>
        </member>
    </members>
</doc>
