PART
{
	name = wbiS3WarpEngine
	module = Part
	author = Angel-125

	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/WarpTech/s3WarpEngine
	}

	rescaleFactor = 1

	node_stack_top = 0.0, 1.875, 0.0, 0.0, 1.0, 0.0, 3
	node_stack_bottom = 0.0, -1.875, 0.0, 0.0, -1.0, 0.0, 3
	node_stack_node1 = 0.0, 2.75, 7.3, 0.0, 1.0, 0.0, 1
	node_stack_node2 = 6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
	node_stack_node3 = -6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
	node_stack_node4 = 0.0, -1.0, 7.3, 0.0, -1.0, 0.0, 1
	node_stack_node5 = 6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1
	node_stack_node6 = -6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1

	TechRequired:NEEDS[CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!CommunityTechTree] = wbiWarpTech

	category = Engine
	subcategory = 0
	entryCost = 2500000
	cost = 500000

	title = S-3 "Star Frontiers" Warp Engine
	manufacturer = <CLASSIFIED>
	description = The S-3 "Star Frontiers" Warp Engine is a sub-scale prototype. Some components were [REDACTED] from [REDACTED] and aren’t well understood, but they should work [REDACTED] to propel a vessel faster than light.
	attachRules = 1,0,1,1,0
	mass = 14
	dragModelType = none
	maximum_drag = 0.02
	minimum_drag = 0.02
	angularDrag = 0.2
	stackSymmetry = 2
	crashTolerance = 20
	thermalMassModifier = 8.0
	emissiveConstant = 0.95
	maxTemp = 2000
	explosionPotential = 0.1
	fuelCrossFeed = True
	breakingForce = 500000
	breakingTorque = 500000
	bulkheadProfiles = size3
	tags = cck-Blueshift warp graviolium

	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}

	MODULE
	{
		name = WBIAnimatedTexture
//		debugMode = true

		// ID of the module so we can distinguish between several animated textures in one part.
		// This animated texture is controlled by the warp engine.
		moduleID = WarpCore

		// Name of transform whose texture we will animate
		textureTransformName = warpCorePlasma

		// The part module will look for <name>1, <name>2, etc. until it can't find images in numeric sequence.
		// Don't include the sequence number here.
		// You can animate both diffuse and emissive textures. You don't need them to have the same number of diffuse and emissive images.
//		animatedDiffuseTexture =

		animatedEmissiveTexture = WildBlueIndustries/Blueshift/Parts/Engine/WarpTech/WarpPlasma

		// Can be zero
		minFramesPerSecond = 15

		// Must be greater than zero. 
		// NOTE: 50 is the fastest that we can go due to how many updates per second we get. 50 is the default value.
		maxFramesPerSecond = 50

		// Emissive animation fades when animation throttle is at minimum.
		fadesAtMinThrottle = false

		// How many seconds until the emissive texture is fully visible/hidden
		emissiveFadeTime = 2
	}

	// You can have multiple animated texture modules in a single part. Each one controls a different transform.
	// This one is for the warp coil embedded in the warp ring.
	MODULE
	{
		name = WBIAnimatedTexture
//		debugMode = true

		// ID of the module so we can distinguish between several animated textures in one part.
		// This one is controlled by the warp coil.
		moduleID = WarpCoil

		textureTransformName = warpCoilPlasma
		animatedEmissiveTexture = WildBlueIndustries/Blueshift/Parts/Engine/WarpTech/WarpPlasma
		minFramesPerSecond = 15
		maxFramesPerSecond = 50
		fadesAtMinThrottle = true
		emissiveFadeTime = 0.5
	}

	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
//		debugMode = true

		// Setting this to the same value as WBIWarpEngine's warpPowerGeneratorID field lets the warp engine control the generator.
		moduleID = warpPower

		// This also replaces the name shown in the editor.
		ConverterName = Main Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp engine.

		StartActionName = Activate Main Power
		StopActionName = Deactivate Main Power
		ToggleActionName = Toggle Main Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
//		textureModuleID =

		// Generators can control effects too
//		startEffect = effectStart
//		stopEffect = effectStop
//		runningEffect = effectRunning

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.01
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = FusionPellets
			Ratio = 0.000188
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 250
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 3750
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 15
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
		{
			ResourceName = StaticCharge
			Ratio = 0.01
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
		DRAINED_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 25
			FlowMode = NO_FLOW
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
//		debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
//		runningEffect =

		// How much warp capacity can the coil produce?
		warpCapacity = 10

		// Warp coils determine how much mass can be displaced during warp travel.
		// Each coil is rated for the number of metric tonnes that it can move. The more coils you have, the more mass that you can move.
		// Alternately, you can add more generators to power the warp coils and "supercharge" them to displace more mass, 
		// but then they'll also wear out faster.
		// A vessel that is more massive than the total displacement will move slower than a vessel that is less massive than the total displacement.
		// Similarly, a coil that is underpowered will displace less mass than one that is overpowered.
		displacementImpulse = 100

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 200
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}

	// Warp engines provide faster than light travel but require resources to do so.
	MODULE
	{
		name = WBIWarpEngine
//		debugEnabled = true

		// Short description of the module as displayed in the editor.
		moduleDescription = Enables fater than light travel.

		EngineType = Generic
		exhaustDamage = False
		heatProduction = 0
		fxOffset = 0, 0, 0
		ignitionThreshold = 0.01
		minThrust = 0

		// Optional bow shock transform for the warp effects
		bowShockTransformName = bowShock

		// We need a non-significant value so that KSP won't flip out when the flight scene is loaded.
		maxThrust = 1

		// Warp engines need a small amount of electric charge to operate.
		PROPELLANT
		{
			name = ElectricCharge
			resourceFlowMode = STAGE_PRIORITY_FLOW
			ratio = 1.8
			DrawGauge = True
			minResToLeave = 1.0
		}

		// Minimum planetary radii needed to go to warp.
		minPlanetaryRadius = 1.0

		// When the powerMultiplier drops below this value, the engine will flame out.
		warpIgnitionThreshold = 0.25

		// While in orbit around a planet or moon, limit top speed by this multiplier so that we don't blow past the celestial body.
		// Think of this as a speed limit while in the harbor.
		// Out in interplanetary space, we can really open up the throttle.
		// The first number represents how close to the SOI edge the vessel is (1 = right at the edge, 0.1 = 10% of the distance to the SOI edge)
		// The second number is the top speed multiplier.
		planetarySOISpeedCurve
		{
			key = 1 0.1
			key = 0.5 0.05
			key = 0.25 0.01
			key = 0.1 0.005
		}

		// In addition to any specified PROPELLANT resources, warp engines require warpCapacity. Only parts with
		// a WBIWarpCoil part module can generate warpCapacity.
		// The warp curve controls how much warpCapacity is neeeded to go light speed or faster.
		// The first number represents the available warpCapacity, while the second number gives multiples of C.
		// You can apply any kind of warp curve you want, but the baseline uses the Fibonacci sequence * 10.
		// It may seem steep, but in KSP's small scale, 1C is plenty fast.
		// This curve is modified by the engine's displacementImpulse and current vessel mass.
		// effectiveWarpCapacity = warpCapacity * (displacementImpulse / vessel mass)
		warpCurve
		{
			key = 1 0
			key = 10 1
			key = 30 3
			key = 50 4
			key = 80 6
			key = 130 8
			key = 210 12
			key = 340 17
			key = 550 25
			key = 890 37
			key = 1440 54
			key = 2330 79
			key = 3770 116
			key = 6100 170
			key = 9870 249
			key = 15970 366
			key = 28540 537
		}

		// Name of the waterfall effect controller
		waterfallEffectController = warpEffectController

		// Waterfall Warp Effects Curve. This is used to control the Waterfall warp field effects based on the vessel's current warp speed.
		// The first number represents multiples of C, and the second number represents the level at which to drive the warp effects.
		// The effects value ranges from 0 to 1, while there's no upper limit to multiples of C, so keep that in mind.
		waterfallWarpEffectsCurve
		{
			key = 0 0
			key = 0.001 0.1
			key = 0.01 0.25
			key = 0.1 0.25
			key = 0.5 0.375
			key = 1.0 0.5
			key = 1.5 1
		}

		// ISP is important even for a warp engine since it affects propellant consumption. But we're unconcerned about atmosphere.
		atmosphereCurve
		{
			key = 0 100
			key = 1 100
		}

		// Engines can drive WBIModuleGeneratorFX that produce resources needed for warp travel if their moduleID matches this value.
		warpPowerGeneratorID = warpPower

		// Multiplies resource consumption and production rates by this multiplier when in interstellar space.
		// Generators identified by warpPowerGeneratorID will be affected by this multiplier.
		// Default multiplier is 10, but the S3 engine has big coils and a particle accelerator, so it is more efficient.
		interstellarPowerMultiplier = 5

		// Effects
		flameoutEffectName = flameout
		powerEffectName = power
		engageEffectName = engage
		disengageEffectName = disengage
		runningEffectName = running
		
		// An optional effect to play when the ship exceeds light speed.
		photonicBoomEffectName = photonicBoom

		// Also used as warp effects spool time.
		engineSpoolTime = 0.05

		// Engines can drive animated textures
		textureModuleID = WarpCore
	}

	MODULE
	{
		name = ModulePartVariants
		baseVariant = endcaps

		VARIANT
		{
			name = endcaps
			displayName = Endcaps
			primaryColor = #3a562a
			secondaryColor = #9e7100
			sizeGroup = GroupA
			GAMEOBJECTS
			{
				endcaps = true
			}
			NODES
			{
				node_stack_node1 = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1
				node_stack_node2 = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1
				node_stack_node3 = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1
				node_stack_node4 = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1
				node_stack_node5 = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1
				node_stack_node6 = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1
			}
		}

		VARIANT
		{
			name = noEndcaps
			displayName = No Endcaps
			primaryColor = #3a562a
			secondaryColor = #9e7100
			sizeGroup = GroupA
			GAMEOBJECTS
			{
				endcaps = false
			}
			NODES
			{
				node_stack_node1 = 0.0, 2.75, 7.3, 0.0, 1.0, 0.0, 1
				node_stack_node2 = 6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
				node_stack_node3 = -6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
				node_stack_node4 = 0.0, -1.0, 7.3, 0.0, -1.0, 0.0, 1
				node_stack_node5 = 6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1
				node_stack_node6 = -6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1
			}
		}
	}

	MODULE:NEEDS[Waterfall]
	{
		name = ModuleWaterfallFX
		engineID = warpEngine
		CONTROLLER
		{
			name = warpEffectController
			linkedTo = custom
		}
		TEMPLATE
		{
			// This is the name of the template to use
			templateName = ftlWarpField

			// This field allows you to override the parentTransform name in the EFFECTS contained in the template
			overrideParentTransform = s3WarpEngine
			position = 0,0,0
			rotation = 0, 0, 0
			scale = 1, 1, 1
		}
		TEMPLATE
		{
			templateName = ftlWarpRingPlume
			overrideParentTransform = s3WarpEngine
			position = 0,0,0
			rotation = 0, 0, 0
			scale = 7.5,7.5,30
		}
		TEMPLATE
		{
			templateName = ftlWarpBowShock
			position = 0,0,0
			rotation = 0, 0, 0
			scale = 1, 1, 1
		}
	}

	RESOURCE
	{
		name = FusionPellets
		amount = 96
		maxAmount = 96
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 64
	}

	RESOURCE
	{
		name = GravityWaves
		amount = 0
		maxAmount = 2000
	}

	RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
	{
		name = StaticCharge
		amount = 0
		maxAmount = 1000
	}

	EFFECTS
	{	
		running
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpEngineRunning
				volume = 0.0 0.0
				volume = 1.0 2.5
				loop = true
			}
		}
		power
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpEnginePower
				volume = 0.0 0.0
				volume = 0.05 0.1
				volume = 0.1 0.25
				volume = 1.0 0.6
				pitch = 0.0 1.0
				pitch = 1.0 1.95
				loop = true
			}
		}
		engage
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpEngineStart
				volume = 2.0
				pitch = 0.6
				loop = false
			}

		}
		disengage
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/WarpEngineStop
				volume = 2.0
				pitch = 0.6
				loop = false
			}

		}
		flameout
		{
			AUDIO
			{
				channel = Ship
				clip = sound_explosion_low
				volume = 1.0
				pitch = 2.0
				loop = false
			}
		}

		photonicBoom
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/PhotonicBoom
				volume = 2.0
				pitch = 1.0
				loop = false
			}
		}	
	}
}
